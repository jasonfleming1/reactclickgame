{"version":3,"sources":["components/Wrapper/index.js","components/Card/index.js","components/Header/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","Container_default","className","children","Card","alt","src","image","onClick","handleClickEvent","name","id","Header","alert","score","highScore","Footer","App","state","data","clicked","shuffle","i","length","j","Math","floor","random","temp","resetGame","_this","setState","max","isCorrect","newData","map","newCard","Object","objectSpread","console","log","handleCorrectGuess","handleIncorrectGuess","this","_this2","components_Header","components_Wrapper","components_Card","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8d75779.chunk.js","sourcesContent":["//============ IMPORTS ============\r\nimport React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport \"./wrapper.css\";\r\n\r\n//============ CONTENT ============\r\nconst Wrapper = (props) => (\r\n    <Container className=\"wrapper\">\r\n        {props.children}\r\n    </Container>\r\n);\r\n\r\n//============ EXPORT ============\r\nexport default Wrapper;","//============ IMPORTS ============\r\nimport React from \"react\";\r\nimport \"./card.css\";\r\n\r\n//============ CONTENT ============\r\nconst Card = (props) => (\r\n    <div className=\"card m-4 float-left\">\r\n        <img className=\"card-img-top\"\r\n        alt=\"princess\" \r\n        src={props.image} \r\n        onClick={() => props.handleClickEvent(props.name)}\r\n        id={props.id} />\r\n    </div>\r\n);\r\n\r\n//need to add onclick when functional\r\n\r\n//============ EXPORT ============\r\nexport default Card;","//============ IMPORTS ============\r\nimport React from \"react\";\r\nimport \"./header.css\";\r\n\r\n//============ CONTENT ============\r\nconst Header = (props) => (\r\n    <header className=\"header\" id=\"headerContainer\">\r\n        <div id=\"brand\">Princess Clicker</div>\r\n        <div id=\"alert\">{props.alert}</div>\r\n        <div id=\"scoreBoard\">Score: {props.score} | High Score: {props.highScore} </div>\r\n    </header>\r\n);\r\n\r\n//============ EXPORT ============\r\nexport default Header;","//============ IMPORTS ============\r\nimport React from \"react\";\r\nimport \"./footer.css\";\r\n\r\n//============ CONTENT ============\r\nconst Footer = () => (\r\n    <footer className=\"footer\">\r\n        <div id=\"appName\">Princess Clicker</div>\r\n    </footer>\r\n);\r\n\r\n//============ EXPORT ============\r\nexport default Footer;","//================ IMPORT ================\nimport React, { Component } from 'react';\nimport data from \"./data.json\"; //princesses.json was too long\nimport Wrapper from \"./components/Wrapper\";\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\n\n//================ FUNCTIONALITY  ================\n\n// data arrya | setting this.state.data \nclass App extends Component {\n  state = {\n    data,\n    score: 0,\n    highScore: 0,\n    clicked: [],\n    alert: \"Click a princess to begin!\",\n    \n  }\n\n  //Don't click the same princess twice!\n\n  // componentDidMount | display and shuffle data\n  componentDidMount(){\n    this.setState({ data: this.shuffle(this.state.data)})\n  }\n\n  // shuffle data | https://www.frankmitchell.org/2015/01/fisher-yates/\n  shuffle = data => {\n    for (let i = data.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i]\n      data[i] = data[j];\n      data[j] = temp;\n    }\n    return (data);\n  }\n\n  // reset game | use .map (readme.6)\n  resetGame = () => {\n    this.setState({\n      alert: \"Too bad! let's try again\",\n      highScore: Math.max(this.state.score, this.state.highScore),\n      score: 0,\n      data: data,\n    })\n  }\n\n  // handleClickEvent | \n    handleClickEvent = name => {\n      //alert(\"This Card's id is \" + Card + this.state.name)\n      let isCorrect = false;\n      const newData = this.state.data.map(data => {\n        const newCard = {...data};\n        if (newCard.name === name)\n          if (!newCard.clicked) {\n            console.log(\"Already guessed this princess\");\n            newCard.clicked = true;\n            isCorrect = true;\n          }\n          return newCard;\n      })\n    console.log(\"Guess Correct! \", isCorrect);\n    isCorrect ? this.handleCorrectGuess(newData) : this.handleIncorrectGuess(newData);\n\t}\n  // handle correct guess | increment score\n  handleCorrectGuess = newData => {\n    this.setState({ \n      data: this.shuffle(newData),\n      score: this.state.score +1,\n      alert: \"Nice One! Keep going!\"\n    })\n  }\n\n  // handle incorrect guess | \n  handleIncorrectGuess = () => {\n\n    this.resetGame();\n  }\n  \n  // hint: begin building a non-functioning static version then add interactions\n\n  render() {\n    return (\n      <div>\n        <Header alert={this.state.alert} score={this.state.score} highScore={this.state.highScore} />\n        <Wrapper>\n          {this.state.data.map(data => (\n            <Card \n              key={data.name}\n              name={data.name}\n              image={data.image}\n              handleClickEvent={this.handleClickEvent}\n              />\n          ))}\n          </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n//================ EXPORTS ================\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}